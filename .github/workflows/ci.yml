name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  tags:
    - "*"

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      TARGET_VERSION: 33
      ANDROID_BUILD_TOOLS_VERSION: 33.0.2
      ANDROID_HOME: ${{ env.HOME }}/android-sdk
    steps:
      - uses: actions/checkout@v3

      # Set up Node.js and pnpm
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install pnpm
        run: npm install -g pnpm@8

      - name: Configure pnpm store directory
        run: pnpm config set store-dir ~/.pnpm-store

      # Set up Java
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Create empty repositories.cfg
      - name: Create empty repositories.cfg
        run: touch $HOME/.android/repositories.cfg

      # Download and set up Android SDK command line tools
      - name: Download and set up Android SDK
        run: |
          wget "https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip" -O commandlinetools.zip
          mkdir -p $ANDROID_HOME/cmdline-tools
          unzip -q commandlinetools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest

      # Accept Android SDK licenses
      - name: Accept Android SDK licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      # Install Android SDK packages
      - name: Install Android SDK packages
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-${{ env.TARGET_VERSION }}" \
            "build-tools;${{ env.ANDROID_BUILD_TOOLS_VERSION }}" \
            "extras;google;m2repository" \
            "extras;android;m2repository"

      # Set up Ruby and Bundler
      - name: Set up Ruby 2.6.0
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.0
          bundler-cache: true
          bundler-version: "2.4.22"

      - name: Install Ruby dependencies
        run: bundle install

      # Install Node.js dependencies
      - name: Install Node.js dependencies
        run: pnpm install

      # Build project
      - name: Build project
        run: pnpm build

      - name: Sync project
        run: pnpm sync

      # Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./sidekick/gradlew

      # Build Android app (Debug)
      - name: Build Android app (Debug)
        working-directory: ./sidekick
        run: ./gradlew clean assembleDebug

  deploy:
    needs: build
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/')
    env:
      TARGET_VERSION: 33
      ANDROID_BUILD_TOOLS_VERSION: 33.0.2
      ANDROID_HOME: ${{ env.HOME }}/android-sdk
    steps:
      - uses: actions/checkout@v3

      # Repeat the setup steps for the deployment job
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install pnpm
        run: npm install -g pnpm@8

      - name: Configure pnpm store directory
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Create empty repositories.cfg
        run: touch $HOME/.android/repositories.cfg

      - name: Download and set up Android SDK
        run: |
          wget "https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip" -O commandlinetools.zip
          mkdir -p $ANDROID_HOME/cmdline-tools
          unzip -q commandlinetools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest

      - name: Accept Android SDK licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

      - name: Install Android SDK packages
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-${{ env.TARGET_VERSION }}" \
            "build-tools;${{ env.ANDROID_BUILD_TOOLS_VERSION }}" \
            "extras;google;m2repository" \
            "extras;android;m2repository"

      - name: Set up Ruby 2.6.0
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.0
          bundler-cache: true
          bundler-version: "2.4.22"

      - name: Install Ruby dependencies
        run: bundle install

      - name: Install Node.js dependencies
        run: pnpm install

      - name: Build project
        run: pnpm build

      - name: Sync project
        run: pnpm sync

      - name: Make gradlew executable
        run: chmod +x ./sidekick/gradlew

      # Decrypt signing key
      - name: Decrypt signing key
        env:
          ENCRYPTED_KEY: ${{ secrets.ENCRYPTED_KEY }}
          ENCRYPTED_IV: ${{ secrets.ENCRYPTED_IV }}
        run: |
          openssl aes-256-cbc -K $ENCRYPTED_KEY -iv $ENCRYPTED_IV -in signing.tar.enc -out signing.tar -d
          tar xvf signing.tar

      # Build Android app (Release)
      - name: Build Android app (Release)
        working-directory: ./sidekick
        run: ./gradlew clean assembleRelease

      # Run Fastlane
      - name: Run Fastlane alpha
        run: fastlane alpha

      # Create GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Upload release asset
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sidekick/app/build/outputs/bundle/release/*.aab
          asset_name: sidekick-${{ github.ref }}.aab
          asset_content_type: application/octet-stream
